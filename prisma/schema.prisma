generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
model User {
  id       String      @id @default(uuid())
  username String
  email    String   @unique
  role     String @default("admin") 
  isActive Boolean @default(true)
  isConfirmed Boolean @default(false)
  password String
  passwordResetToken String @default("")
  passwordResetExpires DateTime @default(now())
  emailConfirmToken String @default("")
  emailConfirmExpires DateTime @default(now())
  orders   Order[] @relation("UserToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Billboard {
  id          String @id @default(uuid())
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String      @id @default(uuid())
  billboardId String      
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([billboardId])
}

model Product {
  id          String    @id @default(uuid())
  categoryId  String    
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   
  orderItems  OrderItem[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id        String    @id @default(uuid())
  userId     String    
  user       User     @relation("UserToOrder", fields: [userId], references: [id])
  orderItems OrderItem[] 
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}


model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  amount    Decimal @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt


  @@index([orderId])
  @@index([productId])
}

model Size {
  id          String    @id @default(uuid())
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // @@index([storeId])
}

model Color {
  id          String   @id @default(uuid())
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // [unrefrenced]
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}


